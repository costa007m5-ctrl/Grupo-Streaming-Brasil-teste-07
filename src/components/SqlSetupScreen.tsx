import React, { useState } from 'react';
import { ArrowLeftIcon, DocumentDuplicateIcon } from './Icons';

const Header: React.FC<{ onBack: () => void; }> = ({ onBack }) => (
    <header className="sticky top-0 bg-white/80 backdrop-blur-sm z-10 p-4">
        <div className="relative flex justify-center items-center text-gray-800 w-full h-8">
            <button onClick={onBack} className="absolute left-0 p-2 -ml-2">
                <ArrowLeftIcon className="w-6 h-6" />
            </button>
            <h1 className="text-xl font-bold">Configuração do Banco</h1>
        </div>
    </header>
);

const MIGRATION_SCRIPT_SQL = `-- SCRIPT DE ATUALIZAÇÃO E MIGRAÇÃO
-- Execute este script no seu Editor SQL do Supabase para atualizar um banco de dados existente para a versão mais recente sem perder dados.

-- 1. ADICIONAR NOVAS COLUNAS À TABELA DE PERFIS
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS created_at timestamptz DEFAULT now();
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS phone text;
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS is_phone_verified boolean DEFAULT false;
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS birth_date date;
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS cpf text;
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS cep text;
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS street text;
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS "number" text;
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS complement text;
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS neighborhood text;
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS city text;
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS state text;
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS fcm_tokens text[];
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS is_profile_private boolean DEFAULT false;
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS is_searchable boolean DEFAULT true;
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS host_rating_avg numeric(2, 1) DEFAULT 0.0;
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS host_rating_count integer DEFAULT 0;

-- Adicionar coluna de reviews na tabela de grupos
ALTER TABLE public.groups ADD COLUMN IF NOT EXISTS reviews jsonb;

-- 2. CRIAR TABELA DE TICKETS DE SUPORTE (SE NÃO EXISTIR)
CREATE TABLE IF NOT EXISTS public.support_tickets (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at timestamptz NOT NULL DEFAULT now(),
  user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  subject text NOT NULL,
  status text NOT NULL DEFAULT 'aberto', -- 'aberto', 'em andamento', 'fechado'
  messages jsonb,
  updated_at timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.support_tickets IS 'Armazena os tickets de suporte dos usuários.';

-- Habilitar RLS para a nova tabela
ALTER TABLE public.support_tickets ENABLE ROW LEVEL SECURITY;

-- Adicionar políticas de RLS para tickets
DROP POLICY IF EXISTS "Admin has full access to tickets" ON public.support_tickets;
DROP POLICY IF EXISTS "Users can view their own tickets" ON public.support_tickets;
DROP POLICY IF EXISTS "Users can create their own tickets" ON public.support_tickets;
DROP POLICY IF EXISTS "Users can update their own tickets" ON public.support_tickets;

CREATE POLICY "Admin has full access to tickets" ON public.support_tickets FOR ALL USING (auth.uid() = '206cb0fc-ea8b-4823-9aea-bba231edbaf8') WITH CHECK (auth.uid() = '206cb0fc-ea8b-4823-9aea-bba231edbaf8');
CREATE POLICY "Users can view their own tickets" ON public.support_tickets FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can create their own tickets" ON public.support_tickets FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can update their own tickets" ON public.support_tickets FOR UPDATE USING (auth.uid() = user_id);

-- Trigger para atualizar 'updated_at' nos tickets
CREATE OR REPLACE FUNCTION public.update_ticket_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = now();
   RETURN NEW;
END;
$$ language 'plpgsql';

DROP TRIGGER IF EXISTS update_ticket_updated_at ON public.support_tickets;
CREATE TRIGGER update_ticket_updated_at
BEFORE UPDATE ON public.support_tickets
FOR EACH ROW
EXECUTE PROCEDURE public.update_ticket_updated_at_column();


-- 3. ATUALIZAR FUNÇÕES RPC (Remote Procedure Call)
CREATE OR REPLACE FUNCTION public.get_public_profile_by_wallet_id(p_wallet_id text)
RETURNS TABLE (
  id uuid,
  full_name text,
  avatar_url text,
  wallet_id text,
  cpf text
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  RETURN QUERY
  SELECT
    p.id,
    p.full_name,
    p.avatar_url,
    p.wallet_id,
    p.cpf
  FROM
    public.profiles p
  WHERE
    p.wallet_id = p_wallet_id;
END;
$$;

CREATE OR REPLACE FUNCTION public.handle_transfer(recipient_id uuid, transfer_amount numeric)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  sender_id uuid;
  sender_profile public.profiles;
  recipient_profile public.profiles;
BEGIN
  sender_id := auth.uid();
  IF sender_id = recipient_id THEN
    RAISE EXCEPTION 'Não é possível transferir para si mesmo.';
  END IF;

  SELECT * INTO sender_profile FROM public.profiles WHERE id = sender_id;
  IF sender_profile IS NULL THEN
    RAISE EXCEPTION 'Perfil do remetente não encontrado.';
  END IF;
  IF sender_profile.balance < transfer_amount THEN
    RAISE EXCEPTION 'Saldo insuficiente para realizar a transferência.';
  END IF;
  
  IF transfer_amount <= 0 THEN
    RAISE EXCEPTION 'O valor da transferência deve ser positivo.';
  END IF;

  SELECT * INTO recipient_profile FROM public.profiles WHERE id = recipient_id;
  IF recipient_profile IS NULL THEN
    RAISE EXCEPTION 'Perfil do destinatário não encontrado.';
  END IF;

  UPDATE public.profiles
  SET balance = balance - transfer_amount
  WHERE id = sender_id;

  UPDATE public.profiles
  SET balance = balance + transfer_amount
  WHERE id = recipient_id;

  INSERT INTO public.transactions (user_id, amount, type, description, metadata)
  VALUES (
    sender_id,
    -transfer_amount,
    'transfer_out',
    'Transferência para ' || recipient_profile.full_name,
    jsonb_build_object('recipient_id', recipient_id, 'recipient_wallet_id', recipient_profile.wallet_id)
  );

  INSERT INTO public.transactions (user_id, amount, type, description, metadata)
  VALUES (
    recipient_id,
    transfer_amount,
    'transfer_in',
    'Transferência de ' || sender_profile.full_name,
    jsonb_build_object('sender_id', sender_id, 'sender_wallet_id', sender_profile.wallet_id)
  );
END;
$$;

-- 4. CORRIGIR E ATUALIZAR POLÍTICAS DE SEGURANÇA (RLS)
DROP POLICY IF EXISTS "Allow read access to profiles" ON public.profiles;
CREATE POLICY "Allow read access to profiles" ON public.profiles FOR SELECT TO authenticated USING (auth.uid() = id OR auth.uid() = '206cb0fc-ea8b-4823-9aea-bba231edbaf8');

DROP POLICY IF EXISTS "Allow users to update their own profile." ON public.profiles;
CREATE POLICY "Allow users to update their own profile." ON public.profiles FOR UPDATE TO authenticated USING (auth.uid() = id);

DROP POLICY IF EXISTS "Allow read access to groups" ON public.groups;
CREATE POLICY "Allow read access to groups" ON public.groups FOR SELECT TO authenticated USING (((host_id = auth.uid() OR members_list @> jsonb_build_array(jsonb_build_object('id', auth.uid())))) OR auth.uid() = '206cb0fc-ea8b-4823-9aea-bba231edbaf8');

DROP POLICY IF EXISTS "Allow hosts to update their own groups." ON public.groups;
CREATE POLICY "Allow hosts to update their own groups." ON public.groups FOR UPDATE TO authenticated USING (auth.uid() = host_id);

DROP POLICY IF EXISTS "Allow read access to transactions" ON public.transactions;
CREATE POLICY "Allow read access to transactions" ON public.transactions FOR SELECT TO authenticated USING (auth.uid() = user_id OR auth.uid() = '206cb0fc-ea8b-4823-9aea-bba231edbaf8');

-- 5. NOVA FUNÇÃO RPC PARA BUSCAR GRUPOS PÚBLICOS (Corrige tela Explorar)
CREATE OR REPLACE FUNCTION public.get_explore_groups()
RETURNS TABLE (
  id bigint,
  created_at timestamptz,
  name text,
  price numeric,
  status text,
  members smallint,
  max_members smallint,
  next_payment_date text,
  logo text,
  host_name text,
  host_id uuid,
  members_list jsonb,
  rules jsonb,
  credentials jsonb,
  chat_history jsonb,
  reviews jsonb,
  host_rating_avg numeric,
  host_rating_count integer
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  RETURN QUERY
  SELECT
    g.id,
    g.created_at,
    g.name,
    g.price,
    g.status,
    g.members,
    g.max_members,
    g.next_payment_date,
    g.logo,
    g.host_name,
    g.host_id,
    g.members_list,
    g.rules,
    '{}'::jsonb, -- Retorna um objeto JSON vazio para credentials
    '[]'::jsonb,  -- Retorna um array JSON vazio para chat_history
    g.reviews,
    p.host_rating_avg,
    p.host_rating_count
  FROM
    public.groups g
  JOIN
    public.profiles p ON g.host_id = p.id;
END;
$$;

-- 6. NOVA FUNÇÃO RPC PARA ENTRAR EM GRUPOS (Corrige problema de permissão)
CREATE OR REPLACE FUNCTION public.join_group(group_id_to_join bigint)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  user_id_to_join uuid;
  user_profile public.profiles;
  target_group public.groups;
  new_member jsonb;
  new_members_list jsonb;
BEGIN
  user_id_to_join := auth.uid();
  
  -- Obter perfil do usuário e grupo alvo
  SELECT * INTO user_profile FROM public.profiles WHERE id = user_id_to_join;
  SELECT * INTO target_group FROM public.groups WHERE id = group_id_to_join;

  -- Validações
  IF user_profile IS NULL THEN RAISE EXCEPTION 'Perfil do usuário não encontrado.'; END IF;
  IF target_group IS NULL THEN RAISE EXCEPTION 'Grupo não encontrado.'; END IF;
  IF user_profile.balance < target_group.price THEN RAISE EXCEPTION 'Saldo insuficiente.'; END IF;
  IF target_group.members >= target_group.max_members THEN RAISE EXCEPTION 'O grupo está lotado.'; END IF;
  IF target_group.members_list @> jsonb_build_array(jsonb_build_object('id', user_id_to_join)) THEN RAISE EXCEPTION 'Você já é membro deste grupo.'; END IF;

  -- Criar novo membro
  new_member := jsonb_build_object(
      'id', user_profile.id,
      'name', user_profile.full_name,
      'role', 'Membro',
      'joinDate', to_char(now(), 'Mon YYYY'),
      'avatarUrl', user_profile.avatar_url
  );

  -- Atualizar lista de membros e contagem
  new_members_list := target_group.members_list || new_member;

  -- Executar atualizações
  -- 1. Debitar do saldo do usuário
  UPDATE public.profiles
  SET balance = balance - target_group.price
  WHERE id = user_id_to_join;

  -- 2. Atualizar o grupo
  UPDATE public.groups
  SET members = members + 1,
      members_list = new_members_list
  WHERE id = group_id_to_join;

  -- 3. Inserir transação
  INSERT INTO public.transactions (user_id, amount, type, description, metadata)
  VALUES (
    user_id_to_join,
    -target_group.price,
    'payment',
    'Pagamento grupo ' || target_group.name,
    jsonb_build_object('group_id', group_id_to_join)
  );
END;
$$;

-- 7. NOVA FUNÇÃO RPC PARA ENVIAR MENSAGENS (Corrige problema de permissão)
CREATE OR REPLACE FUNCTION public.send_group_message(group_id_to_update bigint, new_message jsonb)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  sender_id uuid;
  target_group public.groups;
  is_member boolean;
BEGIN
  sender_id := auth.uid();
  
  -- Obter grupo alvo
  SELECT * INTO target_group FROM public.groups WHERE id = group_id_to_update;
  IF target_group IS NULL THEN RAISE EXCEPTION 'Grupo não encontrado.'; END IF;

  -- Verificar se o remetente é membro do grupo
  SELECT EXISTS (
    SELECT 1
    FROM jsonb_array_elements(target_group.members_list) as member
    WHERE member->>'id' = sender_id::text
  ) INTO is_member;
  
  IF NOT is_member THEN RAISE EXCEPTION 'Você não é membro deste grupo e não pode enviar mensagens.'; END IF;

  -- Adicionar a nova mensagem ao histórico
  UPDATE public.groups
  SET chat_history = chat_history || new_message
  WHERE id = group_id_to_update;

END;
$$;

-- 8. NOVA FUNÇÃO RPC PARA SUBMETER AVALIAÇÃO
CREATE OR REPLACE FUNCTION public.submit_review(p_group_id bigint, p_rating integer, p_comment text)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  reviewer_id uuid;
  reviewer_profile public.profiles;
  target_group public.groups;
  new_review jsonb;
  is_member boolean;
  has_reviewed boolean;
  host_profile_id uuid;
  new_avg numeric;
  new_count integer;
BEGIN
  reviewer_id := auth.uid();
  
  -- Get reviewer profile and target group
  SELECT * INTO reviewer_profile FROM public.profiles WHERE id = reviewer_id;
  SELECT * INTO target_group FROM public.groups WHERE id = p_group_id;

  -- Validations
  IF reviewer_profile IS NULL THEN RAISE EXCEPTION 'Perfil do usuário não encontrado.'; END IF;
  IF target_group IS NULL THEN RAISE EXCEPTION 'Grupo não encontrado.'; END IF;
  IF p_rating < 1 OR p_rating > 5 THEN RAISE EXCEPTION 'A avaliação deve ser entre 1 e 5.'; END IF;

  host_profile_id := target_group.host_id;
  IF reviewer_id = host_profile_id THEN RAISE EXCEPTION 'Anfitriões não podem avaliar o próprio grupo.'; END IF;

  -- Check if user is a member
  SELECT EXISTS (
    SELECT 1 FROM jsonb_array_elements(target_group.members_list) as member WHERE member->>'id' = reviewer_id::text
  ) INTO is_member;
  IF NOT is_member THEN RAISE EXCEPTION 'Apenas membros do grupo podem deixar uma avaliação.'; END IF;

  -- Check if user has already reviewed
  IF target_group.reviews IS NOT NULL THEN
    SELECT EXISTS (
      SELECT 1 FROM jsonb_array_elements(target_group.reviews) as review WHERE review->>'user_id' = reviewer_id::text
    ) INTO has_reviewed;
    IF has_reviewed THEN RAISE EXCEPTION 'Você já avaliou este grupo.'; END IF;
  END IF;

  -- Create new review object
  new_review := jsonb_build_object(
      'id', gen_random_uuid(),
      'user_id', reviewer_id,
      'user_name', reviewer_profile.full_name,
      'user_avatar_url', reviewer_profile.avatar_url,
      'rating', p_rating,
      'comment', p_comment,
      'created_at', now()
  );

  -- Add review to group's reviews
  UPDATE public.groups
  SET reviews = COALESCE(reviews, '[]'::jsonb) || new_review
  WHERE id = p_group_id;

  -- Recalculate host's average rating
  SELECT
    AVG((r->>'rating')::integer),
    COUNT(*)
  INTO
    new_avg,
    new_count
  FROM
    public.groups g,
    jsonb_array_elements(g.reviews) r
  WHERE
    g.host_id = host_profile_id;
  
  UPDATE public.profiles
  SET host_rating_avg = new_avg,
      host_rating_count = new_count
  WHERE id = host_profile_id;

END;
$$;

-- FIM DO SCRIPT DE ATUALIZAÇÃO
`;


const ADMIN_SETUP_SQL = `-- CONFIGURAÇÃO DE ADMIN (Opcional)
-- As políticas de LEITURA (SELECT) para o modo admin foram integradas
-- aos scripts de "Configuração Inicial" e "Atualização" para maior robustez.
-- Agora, o acesso de leitura do admin funcionará automaticamente após executar
-- um desses scripts.

-- Este arquivo é mantido para futuras políticas específicas de admin (como UPDATE ou DELETE em todas as tabelas).
-- Exemplo de uma futura política de UPDATE para o admin:
-- CREATE POLICY "Allow admin to update any profile" ON public.profiles
-- FOR UPDATE TO authenticated USING (auth.uid() = '206cb0fc-ea8b-4823-9aea-bba231edbaf8');

-- Nenhuma ação é necessária no momento para acesso de leitura.
`;

const INITIAL_SETUP_SQL = `-- SCRIPT DE CONFIGURAÇÃO INICIAL (Para novos usuários)

-- 1. HABILITAR EXTENSÃO pgcrypto
CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

-- 2. CRIAR TABELA DE PERFIS (PROFILES)
CREATE TABLE IF NOT EXISTS public.profiles (
  id uuid NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz,
  full_name text,
  avatar_url text,
  balance numeric(10, 2) NOT NULL DEFAULT 0.00,
  wallet_id text UNIQUE,
  is_verified boolean NOT NULL DEFAULT false,
  phone text,
  is_phone_verified boolean NOT NULL DEFAULT false,
  birth_date date,
  cpf text,
  cep text,
  street text,
  "number" text,
  complement text,
  neighborhood text,
  city text,
  state text,
  fcm_tokens text[],
  is_profile_private boolean DEFAULT false,
  is_searchable boolean DEFAULT true,
  host_rating_avg numeric(2, 1) DEFAULT 0.0,
  host_rating_count integer DEFAULT 0
);
COMMENT ON TABLE public.profiles IS 'Armazena informações públicas do perfil de cada usuário.';

-- 3. CRIAR TABELA DE GRUPOS (GROUPS)
CREATE TABLE IF NOT EXISTS public.groups (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at timestamptz NOT NULL DEFAULT now(),
  name text NOT NULL,
  price numeric(10, 2) NOT NULL,
  status text NOT NULL DEFAULT 'Ativo',
  members smallint NOT NULL DEFAULT 1,
  max_members smallint NOT NULL,
  next_payment_date text,
  logo text,
  host_name text,
  host_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  members_list jsonb,
  rules jsonb,
  credentials jsonb,
  chat_history jsonb,
  reviews jsonb
);
COMMENT ON TABLE public.groups IS 'Armazena todos os dados dos grupos de assinatura.';

-- 4. CRIAR TABELA DE TRANSAÇÕES (TRANSACTIONS)
CREATE TABLE IF NOT EXISTS public.transactions (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at timestamptz NOT NULL DEFAULT now(),
  user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  amount numeric(10, 2) NOT NULL,
  type text NOT NULL,
  status text NOT NULL DEFAULT 'completed',
  description text,
  metadata jsonb
);
COMMENT ON TABLE public.transactions IS 'Registra todas as movimentações financeiras dos usuários.';

-- 5. CRIAR TABELA DE TICKETS DE SUPORTE
CREATE TABLE IF NOT EXISTS public.support_tickets (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at timestamptz NOT NULL DEFAULT now(),
  user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  subject text NOT NULL,
  status text NOT NULL DEFAULT 'aberto', -- 'aberto', 'em andamento', 'fechado'
  messages jsonb,
  updated_at timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.support_tickets IS 'Armazena os tickets de suporte dos usuários.';

-- 6. HABILITAR RLS E CRIAR POLÍTICAS
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.groups ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.transactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.support_tickets ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Allow read access to profiles" ON public.profiles;
DROP POLICY IF EXISTS "Allow users to insert their own profile." ON public.profiles;
DROP POLICY IF EXISTS "Allow users to update their own profile." ON public.profiles;
CREATE POLICY "Allow read access to profiles" ON public.profiles FOR SELECT TO authenticated USING (auth.uid() = id OR auth.uid() = '206cb0fc-ea8b-4823-9aea-bba231edbaf8');
CREATE POLICY "Allow users to insert their own profile." ON public.profiles FOR INSERT TO authenticated WITH CHECK (auth.uid() = id);
CREATE POLICY "Allow users to update their own profile." ON public.profiles FOR UPDATE TO authenticated USING (auth.uid() = id);

DROP POLICY IF EXISTS "Allow read access to groups" ON public.groups;
DROP POLICY IF EXISTS "Allow users to create groups." ON public.groups;
DROP POLICY IF EXISTS "Allow hosts to update their own groups." ON public.groups;
CREATE POLICY "Allow read access to groups" ON public.groups FOR SELECT TO authenticated USING (((host_id = auth.uid() OR members_list @> jsonb_build_array(jsonb_build_object('id', auth.uid())))) OR auth.uid() = '206cb0fc-ea8b-4823-9aea-bba231edbaf8');
CREATE POLICY "Allow users to create groups." ON public.groups FOR INSERT TO authenticated WITH CHECK (auth.uid() = host_id);
CREATE POLICY "Allow hosts to update their own groups." ON public.groups FOR UPDATE TO authenticated USING (auth.uid() = host_id);

DROP POLICY IF EXISTS "Allow read access to transactions" ON public.transactions;
DROP POLICY IF EXISTS "Allow insert for own transactions" ON public.transactions;
CREATE POLICY "Allow read access to transactions" ON public.transactions FOR SELECT TO authenticated USING (auth.uid() = user_id OR auth.uid() = '206cb0fc-ea8b-4823-9aea-bba231edbaf8');
CREATE POLICY "Allow insert for own transactions" ON public.transactions FOR INSERT TO authenticated WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "Admin has full access to tickets" ON public.support_tickets;
DROP POLICY IF EXISTS "Users can view their own tickets" ON public.support_tickets;
DROP POLICY IF EXISTS "Users can create their own tickets" ON public.support_tickets;
DROP POLICY IF EXISTS "Users can update their own tickets" ON public.support_tickets;
CREATE POLICY "Admin has full access to tickets" ON public.support_tickets FOR ALL USING (auth.uid() = '206cb0fc-ea8b-4823-9aea-bba231edbaf8') WITH CHECK (auth.uid() = '206cb0fc-ea8b-4823-9aea-bba231edbaf8');
CREATE POLICY "Users can view their own tickets" ON public.support_tickets FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can create their own tickets" ON public.support_tickets FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can update their own tickets" ON public.support_tickets FOR UPDATE USING (auth.uid() = user_id);

-- 7. FUNÇÕES E TRIGGERS
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger LANGUAGE plpgsql SECURITY DEFINER SET search_path = public AS $$
DECLARE
  v_full_name text;
  v_wallet_id_base text;
BEGIN
  v_full_name := COALESCE(new.raw_user_meta_data->>'full_name', 'Novo Usuário');
  v_wallet_id_base := '@' || lower(regexp_replace(v_full_name, E'\\s+', '.', 'g'));

  INSERT INTO public.profiles (id, full_name, avatar_url, wallet_id)
  VALUES (
    new.id,
    v_full_name,
    COALESCE(new.raw_user_meta_data->>'avatar_url', 'https://img.icons8.com/color/96/yoda.png'),
    v_wallet_id_base || '-' || substr(new.id::text, 1, 4)
  );
  RETURN new;
END;
$$;
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = now();
   RETURN NEW;
END;
$$ language 'plpgsql';

DROP TRIGGER IF EXISTS update_profiles_updated_at ON public.profiles;
CREATE TRIGGER update_profiles_updated_at
BEFORE UPDATE ON public.profiles
FOR EACH ROW
EXECUTE PROCEDURE public.update_updated_at_column();

CREATE OR REPLACE FUNCTION public.update_ticket_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = now();
   RETURN NEW;
END;
$$ language 'plpgsql';

DROP TRIGGER IF EXISTS update_ticket_updated_at ON public.support_tickets;
CREATE TRIGGER update_ticket_updated_at
BEFORE UPDATE ON public.support_tickets
FOR EACH ROW
EXECUTE PROCEDURE public.update_ticket_updated_at_column();

-- ADICIONA AS NOVAS FUNÇÕES RPC
CREATE OR REPLACE FUNCTION public.get_explore_groups()
RETURNS TABLE (
  id bigint,
  created_at timestamptz,
  name text,
  price numeric,
  status text,
  members smallint,
  max_members smallint,
  next_payment_date text,
  logo text,
  host_name text,
  host_id uuid,
  members_list jsonb,
  rules jsonb,
  credentials jsonb,
  chat_history jsonb,
  reviews jsonb,
  host_rating_avg numeric,
  host_rating_count integer
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  RETURN QUERY
  SELECT
    g.id,
    g.created_at,
    g.name,
    g.price,
    g.status,
    g.members,
    g.max_members,
    g.next_payment_date,
    g.logo,
    g.host_name,
    g.host_id,
    g.members_list,
    g.rules,
    '{}'::jsonb, -- credentials
    '[]'::jsonb,  -- chat_history
    g.reviews,
    p.host_rating_avg,
    p.host_rating_count
  FROM
    public.groups g
  JOIN
    public.profiles p ON g.host_id = p.id;
END;
$$;

CREATE OR REPLACE FUNCTION public.join_group(group_id_to_join bigint)
RETURNS void LANGUAGE plpgsql SECURITY DEFINER AS $$
DECLARE
  user_id_to_join uuid; user_profile public.profiles; target_group public.groups; new_member jsonb; new_members_list jsonb;
BEGIN
  user_id_to_join := auth.uid();
  SELECT * INTO user_profile FROM public.profiles WHERE id = user_id_to_join;
  SELECT * INTO target_group FROM public.groups WHERE id = group_id_to_join;
  IF user_profile IS NULL THEN RAISE EXCEPTION 'Perfil do usuário não encontrado.'; END IF;
  IF target_group IS NULL THEN RAISE EXCEPTION 'Grupo não encontrado.'; END IF;
  IF user_profile.balance < target_group.price THEN RAISE EXCEPTION 'Saldo insuficiente.'; END IF;
  IF target_group.members >= target_group.max_members THEN RAISE EXCEPTION 'O grupo está lotado.'; END IF;
  IF target_group.members_list @> jsonb_build_array(jsonb_build_object('id', user_id_to_join)) THEN RAISE EXCEPTION 'Você já é membro deste grupo.'; END IF;
  new_member := jsonb_build_object('id', user_profile.id, 'name', user_profile.full_name, 'role', 'Membro', 'joinDate', to_char(now(), 'Mon YYYY'), 'avatarUrl', user_profile.avatar_url);
  new_members_list := target_group.members_list || new_member;
  UPDATE public.profiles SET balance = balance - target_group.price WHERE id = user_id_to_join;
  UPDATE public.groups SET members = members + 1, members_list = new_members_list WHERE id = group_id_to_join;
  INSERT INTO public.transactions (user_id, amount, type, description, metadata) VALUES (user_id_to_join, -target_group.price, 'payment', 'Pagamento grupo ' || target_group.name, jsonb_build_object('group_id', group_id_to_join));
END;
$$;

CREATE OR REPLACE FUNCTION public.send_group_message(group_id_to_update bigint, new_message jsonb)
RETURNS void LANGUAGE plpgsql SECURITY DEFINER AS $$
DECLARE
  sender_id uuid; target_group public.groups; is_member boolean;
BEGIN
  sender_id := auth.uid();
  SELECT * INTO target_group FROM public.groups WHERE id = group_id_to_update;
  IF target_group IS NULL THEN RAISE EXCEPTION 'Grupo não encontrado.'; END IF;
  SELECT EXISTS (SELECT 1 FROM jsonb_array_elements(target_group.members_list) as member WHERE member->>'id' = sender_id::text) INTO is_member;
  IF NOT is_member THEN RAISE EXCEPTION 'Você não é membro deste grupo e não pode enviar mensagens.'; END IF;
  UPDATE public.groups SET chat_history = chat_history || new_message WHERE id = group_id_to_update;
END;
$$;

-- FUNÇÃO PARA SUBMETER AVALIAÇÃO
CREATE OR REPLACE FUNCTION public.submit_review(p_group_id bigint, p_rating integer, p_comment text)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  reviewer_id uuid;
  reviewer_profile public.profiles;
  target_group public.groups;
  new_review jsonb;
  is_member boolean;
  has_reviewed boolean;
  host_profile_id uuid;
  new_avg numeric;
  new_count integer;
BEGIN
  reviewer_id := auth.uid();
  
  -- Get reviewer profile and target group
  SELECT * INTO reviewer_profile FROM public.profiles WHERE id = reviewer_id;
  SELECT * INTO target_group FROM public.groups WHERE id = p_group_id;

  -- Validations
  IF reviewer_profile IS NULL THEN RAISE EXCEPTION 'Perfil do usuário não encontrado.'; END IF;
  IF target_group IS NULL THEN RAISE EXCEPTION 'Grupo não encontrado.'; END IF;
  IF p_rating < 1 OR p_rating > 5 THEN RAISE EXCEPTION 'A avaliação deve ser entre 1 e 5.'; END IF;

  host_profile_id := target_group.host_id;
  IF reviewer_id = host_profile_id THEN RAISE EXCEPTION 'Anfitriões não podem avaliar o próprio grupo.'; END IF;

  -- Check if user is a member
  SELECT EXISTS (
    SELECT 1 FROM jsonb_array_elements(target_group.members_list) as member WHERE member->>'id' = reviewer_id::text
  ) INTO is_member;
  IF NOT is_member THEN RAISE EXCEPTION 'Apenas membros do grupo podem deixar uma avaliação.'; END IF;

  -- Check if user has already reviewed
  IF target_group.reviews IS NOT NULL THEN
    SELECT EXISTS (
      SELECT 1 FROM jsonb_array_elements(target_group.reviews) as review WHERE review->>'user_id' = reviewer_id::text
    ) INTO has_reviewed;
    IF has_reviewed THEN RAISE EXCEPTION 'Você já avaliou este grupo.'; END IF;
  END IF;

  -- Create new review object
  new_review := jsonb_build_object(
      'id', gen_random_uuid(),
      'user_id', reviewer_id,
      'user_name', reviewer_profile.full_name,
      'user_avatar_url', reviewer_profile.avatar_url,
      'rating', p_rating,
      'comment', p_comment,
      'created_at', now()
  );

  -- Add review to group's reviews
  UPDATE public.groups
  SET reviews = COALESCE(reviews, '[]'::jsonb) || new_review
  WHERE id = p_group_id;

  -- Recalculate host's average rating
  SELECT
    AVG((r->>'rating')::integer),
    COUNT(*)
  INTO
    new_avg,
    new_count
  FROM
    public.groups g,
    jsonb_array_elements(g.reviews) r
  WHERE
    g.host_id = host_profile_id;
  
  UPDATE public.profiles
  SET host_rating_avg = new_avg,
      host_rating_count = new_count
  WHERE id = host_profile_id;

END;
$$;
`;

const ERROR_FIX_SQL = `-- SCRIPT DE CORREÇÃO DE ERROS COMUNS (Funções RPC)
-- Execute este script se estiver recebendo erros como "Could not find the function..."

-- 1. FUNÇÃO PARA BUSCAR GRUPOS PÚBLICOS (Corrige tela Explorar)
-- Este script cria/substitui a função que busca os grupos para a tela de exploração,
-- garantindo que ela exista e não exponha dados sensíveis como credenciais.
CREATE OR REPLACE FUNCTION public.get_explore_groups()
RETURNS TABLE (
  id bigint,
  created_at timestamptz,
  name text,
  price numeric,
  status text,
  members smallint,
  max_members smallint,
  next_payment_date text,
  logo text,
  host_name text,
  host_id uuid,
  members_list jsonb,
  rules jsonb,
  credentials jsonb,
  chat_history jsonb,
  reviews jsonb,
  host_rating_avg numeric,
  host_rating_count integer
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  RETURN QUERY
  SELECT
    g.id,
    g.created_at,
    g.name,
    g.price,
    g.status,
    g.members,
    g.max_members,
    g.next_payment_date,
    g.logo,
    g.host_name,
    g.host_id,
    g.members_list,
    g.rules,
    '{}'::jsonb, -- Retorna um objeto JSON vazio para credentials
    '[]'::jsonb,  -- Retorna um array JSON vazio para chat_history
    g.reviews,
    p.host_rating_avg,
    p.host_rating_count
  FROM
    public.groups g
  JOIN
    public.profiles p ON g.host_id = p.id;
END;
$$;

-- 2. FUNÇÃO PARA ENTRAR EM GRUPOS (Corrige problema de permissão)
-- Este script cria/substitui a função que lida com a entrada de um usuário em um grupo.
-- Usar uma função com "SECURITY DEFINER" permite que a lógica de atualização de saldo
-- e de grupo seja executada com segurança no servidor, sem expor as políticas de RLS.
CREATE OR REPLACE FUNCTION public.join_group(group_id_to_join bigint)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  user_id_to_join uuid;
  user_profile public.profiles;
  target_group public.groups;
  new_member jsonb;
  new_members_list jsonb;
BEGIN
  user_id_to_join := auth.uid();
  
  -- Obter perfil do usuário e grupo alvo
  SELECT * INTO user_profile FROM public.profiles WHERE id = user_id_to_join;
  SELECT * INTO target_group FROM public.groups WHERE id = group_id_to_join;

  -- Validações
  IF user_profile IS NULL THEN RAISE EXCEPTION 'Perfil do usuário não encontrado.'; END IF;
  IF target_group IS NULL THEN RAISE EXCEPTION 'Grupo não encontrado.'; END IF;
  IF user_profile.balance < target_group.price THEN RAISE EXCEPTION 'Saldo insuficiente.'; END IF;
  IF target_group.members >= target_group.max_members THEN RAISE EXCEPTION 'O grupo está lotado.'; END IF;
  IF target_group.members_list @> jsonb_build_array(jsonb_build_object('id', user_id_to_join)) THEN RAISE EXCEPTION 'Você já é membro deste grupo.'; END IF;

  -- Criar novo membro
  new_member := jsonb_build_object(
      'id', user_profile.id,
      'name', user_profile.full_name,
      'role', 'Membro',
      'joinDate', to_char(now(), 'Mon YYYY'),
      'avatarUrl', user_profile.avatar_url
  );

  -- Atualizar lista de membros e contagem
  new_members_list := target_group.members_list || new_member;

  -- Executar atualizações
  -- 1. Debitar do saldo do usuário
  UPDATE public.profiles
  SET balance = balance - target_group.price
  WHERE id = user_id_to_join;

  -- 2. Atualizar o grupo
  UPDATE public.groups
  SET members = members + 1,
      members_list = new_members_list
  WHERE id = group_id_to_join;

  -- 3. Inserir transação
  INSERT INTO public.transactions (user_id, amount, type, description, metadata)
  VALUES (
    user_id_to_join,
    -target_group.price,
    'payment',
    'Pagamento grupo ' || target_group.name,
    jsonb_build_object('group_id', group_id_to_join)
  );
END;
$$;

-- 3. FUNÇÃO PARA ENVIAR MENSAGENS (Corrige problema de permissão)
-- Este script cria/substitui a função que permite a um membro enviar uma mensagem
-- no chat do grupo. A verificação de membro é feita de forma segura no backend.
CREATE OR REPLACE FUNCTION public.send_group_message(group_id_to_update bigint, new_message jsonb)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  sender_id uuid;
  target_group public.groups;
  is_member boolean;
BEGIN
  sender_id := auth.uid();
  
  -- Obter grupo alvo
  SELECT * INTO target_group FROM public.groups WHERE id = group_id_to_update;
  IF target_group IS NULL THEN RAISE EXCEPTION 'Grupo não encontrado.'; END IF;

  -- Verificar se o remetente é membro do grupo
  SELECT EXISTS (
    SELECT 1
    FROM jsonb_array_elements(target_group.members_list) as member
    WHERE member->>'id' = sender_id::text
  ) INTO is_member;
  
  IF NOT is_member THEN RAISE EXCEPTION 'Você não é membro deste grupo e não pode enviar mensagens.'; END IF;

  -- Adicionar a nova mensagem ao histórico
  UPDATE public.groups
  SET chat_history = chat_history || new_message
  WHERE id = group_id_to_update;

END;
$$;
`;

const CodeBlock: React.FC<{ title: string; code: string; }> = ({ title, code }) => {
    const [copySuccess, setCopySuccess] = useState('');

    const handleCopy = () => {
        if (copySuccess) return;
        navigator.clipboard.writeText(code).then(() => {
            setCopySuccess('Copiado com sucesso!');
            setTimeout(() => setCopySuccess(''), 2000);
        }, () => {
            setCopySuccess('Falhou!');
            setTimeout(() => setCopySuccess(''), 2000);
        });
    };

    return (
        <div className="bg-white p-4 rounded-xl shadow-sm space-y-3">
            <div className="flex justify-between items-center">
                <h2 className="text-lg font-bold text-gray-800">{title}</h2>
                <button 
                    onClick={handleCopy}
                    className="flex items-center justify-center space-x-2 bg-purple-100 text-purple-700 font-semibold py-2 px-3 rounded-lg hover:bg-purple-200 transition-colors text-sm"
                >
                    <DocumentDuplicateIcon className="w-4 h-4" />
                    <span>{copySuccess ? copySuccess : 'Copiar'}</span>
                </button>
            </div>
             <div className="bg-gray-800 text-white rounded-lg p-4 overflow-x-auto">
                <pre className="text-sm whitespace-pre-wrap">
                    <code>{code}</code>
                </pre>
            </div>
        </div>
    );
};

type Tab = 'correcao' | 'inicial' | 'atualizacao' | 'admin';

const TabButton: React.FC<{ label: string; isActive: boolean; onClick: () => void; }> = ({ label, isActive, onClick }) => (
    <button
        onClick={onClick}
        className={`py-2 px-1 text-center font-semibold w-full transition-all rounded-md text-sm ${
            isActive ? 'bg-white text-purple-600 shadow-sm' : 'text-gray-500'
        }`}
    >
        {label}
    </button>
);


const SqlSetupScreen: React.FC<{ onBack: () => void; }> = ({ onBack }) => {
    const [activeTab, setActiveTab] = useState<Tab>('correcao');

    const renderContent = () => {
        switch(activeTab) {
            case 'correcao':
                return <CodeBlock title="Script de Correção de Erros (Funções)" code={ERROR_FIX_SQL} />;
            case 'inicial':
                return <CodeBlock title="Script de Configuração Inicial (Para Novos Usuários)" code={INITIAL_SETUP_SQL} />;
            case 'atualizacao':
                return <CodeBlock title="Script de Atualização (Para Banco Existente)" code={MIGRATION_SCRIPT_SQL} />;
            case 'admin':
                return <CodeBlock title="Script de Configuração de Admin" code={ADMIN_SETUP_SQL} />;
            default:
                return null;
        }
    }

    return (
        <div className="bg-gray-100 min-h-screen">
            <Header onBack={onBack} />
            <main className="p-4 pt-2 space-y-4">
                 <div className="bg-yellow-50 text-yellow-900 p-4 rounded-xl shadow-sm">
                    <h3 className="font-bold">Recebendo erros como "permission denied" ou "Could not find function"?</h3>
                    <p className="text-sm mt-1">
                        Seu banco de dados pode estar desatualizado. A aba <strong>"Correção de Erros"</strong> (selecionada por padrão) resolve os problemas mais comuns de funções ausentes. Para uma atualização completa, use a aba <strong>"Atualização"</strong>.
                    </p>
                </div>

                <div className="bg-white p-2 rounded-xl shadow-sm">
                    <div className="flex justify-center items-center bg-gray-100 rounded-lg p-1">
                        <TabButton label="Correção de Erros" isActive={activeTab === 'correcao'} onClick={() => setActiveTab('correcao')} />
                        <TabButton label="Config. Inicial" isActive={activeTab === 'inicial'} onClick={() => setActiveTab('inicial')} />
                        <TabButton label="Atualização" isActive={activeTab === 'atualizacao'} onClick={() => setActiveTab('atualizacao')} />
                        <TabButton label="Admin" isActive={activeTab === 'admin'} onClick={() => setActiveTab('admin')} />
                    </div>
                </div>

                {renderContent()}

                {activeTab === 'admin' && (
                    <div className="bg-blue-50 text-blue-900 p-4 rounded-xl shadow-sm">
                        <h3 className="font-bold">Como Ativar o Modo Administrador?</h3>
                        <p className="text-sm mt-1">
                            O modo administrador permite visualizar todos os dados do app.
                        </p>
                        <ol className="list-decimal list-inside text-sm mt-2 space-y-1">
                            <li>Execute o script de <strong>"Atualização"</strong> ou <strong>"Configuração Inicial"</strong>. As permissões de admin agora estão incluídas neles.</li>
                            <li>No aplicativo, acesse a tela inicial e <strong>toque 5 vezes na sua foto de perfil</strong>.</li>
                        </ol>
                         <p className="text-sm mt-2">
                            <strong>Status:</strong> O acesso de admin agora é ativado pelos scripts principais.
                        </p>
                    </div>
                )}
            </main>
        </div>
    );
};

export default SqlSetupScreen;